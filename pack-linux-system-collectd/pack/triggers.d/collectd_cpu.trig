#!/usr/bin/env python

import re

_summary_names = ( 'idle', 'nice', 'user', 'wait', 'system', 'softirq', 'irq', 'steal')
# not same order !
_name_2_what = {
    'user':     's/s',
    'irq':      's/s',
    'steal':    'merged_ops/s',
    'nice':     'merged_ops/s',
    'system':   'ops/s',
    'wait':     'ops/s',
    'softirq':  'bytes/s',
    'idle':     'bytes/s',
}

def readable(octets):
    units = ['K', 'M', 'G', 'T', 'P']
    unit = 'B'
    for i, u in enumerate(units):
        if octets > 1024:
            octets = octets / 1024.0
            unit = units[i]
        else:
            break
    return octets, unit


exit_code_output = {0: 'OK',
                    1: 'WARNING',
                    2: 'CRITICAL',
                    3: 'UNKNOWN',
                   }
exit_code = 0
outputs = []

# Get threshold
data = {}

# Get perfs
metrics = allperfs(self)
cpu_names = set([re.match('([^-]*)-(.*)-([^-]*)', metric_name).groups()[1]
            for metric_name in metrics])

perf_datas = []
exit_codes = []
outputs =[]
for cpu in cpu_names:
    data['cpu'] = cpu
    bad_data = False
    begin = "cpu_%s" % cpu
    for name, towhat in _name_2_what.items():
        metric = metrics.get('cpu-%s-%s' % (cpu, name))
        if metric is None: # some might not always be reported
            continue
        value = data[name] = float(metric.value)
        perf_datas.append("{begin}_{name}={value:0.2f}{what};;;0".format(begin=begin, name=name, value=value, what=towhat))

    res = 'CPU-{cpu}: '
    res += ';'.join('{%s:0.2f}' % name
                  for name in _summary_names
                  if name in data )

    outputs.append(res.format(**data))

# Set ouput
perf_data = " ".join(perf_datas)
output = "CPU stats (%s) # %s" % (';'.join(name for name in _summary_names if name in data), " # ".join(outputs))
set_value(self, output, perf_data, exit_code)
