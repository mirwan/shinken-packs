#!/usr/bin/env python

exit_code_output = {0: 'OK',
                    1: 'WARNING',
                    2: 'CRITICAL',
                    3: 'UNKNOWN',
                   }
exit_code = 0
# Get threshold
data = {}
warn = self.host.customs.get('_LOAD_WARN', None)
if not warn is None:
    (data['warn_1'],
     data['warn_5'],
     data['warn_15']) = [float(x) for x in warn.split(",")]
crit = self.host.customs.get('_LOAD_CRIT', None)
if not crit is None:
    (data['crit_1'],
     data['crit_5'],
     data['crit_15']) = [float(x) for x in crit.split(",")]

# Get perfs
# TODO: Check why load-_0 and not load_0
# Check the patch grouped_plugin in collectd_arbiter module
data['1'] = float(perf(self, 'load_0'))
if isinstance(data['1'] , bool):
    raise "No perf data found"
data['5'] = float(perf(self, 'load_1'))
if isinstance(data['5'] , bool):
    raise "No perf data found"
data['15'] = float(perf(self, 'load_2'))
if isinstance(data['15'] , bool):
    raise "No perf data found"


# Prepare output
if warn is not None and crit is not None:
    perf_data = ("load_1=%(1)0.2f;%(warn_1)0.2f;%(crit_1)0.2f;0 "
             "load_5=%(5)0.2f;%(warn_5)0.2f;%(crit_5)0.2f;0 "
             "load_15=%(15)0.2f;%(warn_15)0.2f;%(crit_15)0.2f;0" % data)
else:
    perf_data = ("load_1=%(1)0.2f;;;0 "
             "load_5=%(5)0.2f;;;0 "
             "load_15=%(15)0.2f;;;0 " % data)
output = "Load: %(1)0.2f,%(5)0.2f,%(15)0.2f" % data

# Get status
if warn is not None and crit is not None:
    for x in ['1', '5', '15']:
        if data[x] > data['crit_' + x] and exit_code < 2:
            exit_code = 2
            continue
        if data[x] > data['warn_' + x] and exit_code < 1:
            exit_code = 1
            continue

# Finish output
output = " - ".join((exit_code_output[exit_code], output))

# Set ouput
set_value(self, output, perf_data, exit_code)
